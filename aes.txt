 To perform Rijndael encryption or decryption, first set up a buffer for encryption or decryption:

     nrounds = rijndaelSetupEncrypt(rk, key, keybits);  for encryption
     nrounds = rijndaelSetupDecrypt(rk, key, keybits);  for decryption

     unsigned long *rk;   pointer to encryption/decryption buffer,
                          required space:
                            keybits  32-bit words required
                            128      44
                            192      52
                            256      60

     const unsigned char *key;  key, where length in bytes is:
                                  keybits  number of bytes
                                  128      16
                                  192      24
                                  256      32

     int keybits;         number of bits in key, must be 128, 192 or
                          256

     int nrounds;         number of rounds:
                            keybits  nrounds
                            128      10
                            192      12
                            256      14

The package provides three macros to convert the keybits value to closely related values:

     KEYLENGTH(keybits) number of bytes in key[] array
     RKLENGTH(keybits)  number of 32-bit words in rk[] array
     NROUNDS(keybits)   number of rounds

Encryption and decryption are performed, a block at a time, with the following two functions:

     rijndaelEncrypt(rk, nrounds, plaintext, ciphertext);
     rijndaelDecrypt(rk, nrounds, ciphertext, plaintext);

     const unsigned long *rk;
                          pointer to encryption/decryption buffer which
                          was filled by rijndaelSetupEncrypt() or
                          rijndaelSetupDecrypt()

     int nrounds;         number of rounds, as computed by
                          rijndaelSetupEncrypt(),
                          rijndaelSetupDecrypt() or NROUNDS

     [const] unsigned char plaintext[16];
     [const] unsigned char ciphertext[16];
                          pointers to 16-byte buffers to be encrypted
                          or decrypted; the source buffer has a const
                          qualifier

To satisfy the truly paranoid user, it is probably advisable to clear and delete the buffers after the process is finished. 